from hub import light_matrix,motion_sensor,port
import hub
import runloop
from motor import BRAKE, run_for_degrees, run_for_time, stop, velocity
import motor, time, random, color, distance_sensor, force_sensor, motor_pair
from math import *
from app import linegraph
motion_sensor.up_face()

velo = int(400)
neg_velo= int(-400)

async def main():
    # Unpair existing motor pairs and pair motors C and E
    motor_pair.unpair(motor_pair.PAIR_1)
    motor_pair.unpair(motor_pair.PAIR_2)
    motor_pair.pair(motor_pair.PAIR_1, port.C, port.E)
    
    # reset yaw
    hub.motion_sensor.reset_yaw

    # gyro command
    # for turning subtract yaw angle from target angle
    '''
    speed = Kp * error
        speed = max(-MAX_SPEED, min(MAX_SPEED, speed))
        left_motor.run_at_speed(speed)
        right_motor.run_at_speed(-speed)
    '''
    '''
    speed = Kp * error
        speed = max(-MAX_SPEED, min(MAX_SPEED, speed))
        left_motor.run_at_speed(speed)
        right_motor.run_at_speed(-speed)
        ''' 

    while True:
        error = hub.motion_sensor.get_yaw_face()
        # increase constant absolute value
        correction = error *-7
        motor_pair.move_tank(motor_pair.PAIR_1,int(velo+correction), int(velo-correction))
        await runloop.sleep_ms(1000)
        
    Turn = True
    hub.motion_sensor.reset_yaw
    while Turn == True:
        error = hub.motion_sensor.get_yaw_face() + 20
        correction = error *-2
        motor_pair.move_tank(motor_pair.PAIR_1,int(velo+correction), int(velo-correction))
        await runloop.sleep_ms(2000)
        Turn == False
    hub.motion_sensor.reset_yaw

runloop.run(main())
